## Протокол передачи ##

Здесь мы пройдемя по тому как клиенты и серверы говорят друг с другом чтобы обмениваться данными Git между собой.

### Извлечение данных через HTTP ###

Извлечение через http/s URL заставит Git использовать немного глупый протокол. В этом случае, вся логика ложится на сторону клиента. Сервер не требует специальной настройки - любой статический вебсервер подойдет для этой работы если директори git которую вы извлекает доступна вебсерверу.

Чтобы это работало, вам нужно выполнять единственную команду на репозитории сервера каждый раз если что то обновилось, команда выглядит след.образом linkgit:git-update-server-info[0], которая обновляет файлы objects/info/packs и info/refs чтобы составить список какие refa и пакфайлы досупны, так как вы не можете изменить список через http. Когда эта команда выполняется, файл objects/info/packs выглядит приблизительно след.образом:

	P pack-ce2bd34abc3d8ebc5922dc81b2e1f30bf17c10cc.pack
	P pack-7ad5f5d05f5e20025898c95296fe4b9c861246d8.pack

Так что если извлечение не может найти открытый файл, то оно может попробовать эти пайфайлы. Файл info/refs приблизительно будет выглядеть след.образом:

	184063c9b594f8968d61a686b2f6052779551613	refs/heads/development
	32aae7aef7a412d62192f710f2130302997ec883	refs/heads/master

Потом когда вы извлекаете из этого репозитория, то процесс начнет с этих refs и пройдет объекты коммит до тех пор пока клиет не получит все объекты которые ему нужны.

Например, если вы попросите извлечь ветку master, то это увидит что master указывает на <code>32aae7ae</code> а ваша msater указывает на <code>ab04d88</code>, так что вам нужно <code>32aae7ae</code>. Вы извлекаете этот объект

	CONNECT http://myserver.com
	GET /git/myproject.git/objects/32/aae7aef7a412d62192f710f2130302997ec883 - 200
	
И это выглядит след.образом:

	tree aa176fb83a47d00386be237b450fb9dfb5be251a
	parent bd71cad2d597d0f1827d4a3f67bb96a646f02889
	author Scott Chacon <schacon@gmail.com> 1220463037 -0700
	committer Scott Chacon <schacon@gmail.com> 1220463037 -0700

	added chapters on private repo setup, scm migration, raw git

Теперь это извлекает дерево <code>aa176fb8</code>:

	GET /git/myproject.git/objects/aa/176fb83a47d00386be237b450fb9dfb5be251a - 200

которе выглядет след.образом:

	100644 blob 6ff87c4664981e4397625791c8ea3bbb5f2279a3	COPYING
	100644 blob 97b51a6d3685b093cfb345c9e79516e5099a13fb	README
	100644 blob 9d1b23b8660817e4a74006f15fae86e2a508c573	Rakefile

И теперь это извлекает эти объекты:

	GET /git/myproject.git/objects/6f/f87c4664981e4397625791c8ea3bbb5f2279a3 - 200
	GET /git/myproject.git/objects/97/b51a6d3685b093cfb345c9e79516e5099a13fb - 200
	GET /git/myproject.git/objects/9d/1b23b8660817e4a74006f15fae86e2a508c573 - 200

В действителности это происходит с помощью Curl, и может открываться множество паралельных потоков чтобы ускорить процесс. Когда он заканчивает рекурсию дерева указанног коммитом, оно извлекает следующего родителя..
	
	GET /git/myproject.git/objects/bd/71cad2d597d0f1827d4a3f67bb96a646f02889 - 200

Теперь в этом случае, коммит который вернулся выглядет след.образом:

	tree b4cc00cf8546edd4fcf29defc3aec14de53e6cf8
	parent ab04d884140f7b0cf8bbf86d6883869f16a46f65
	author Scott Chacon <schacon@gmail.com> 1220421161 -0700
	committer Scott Chacon <schacon@gmail.com> 1220421161 -0700

	added chapters on the packfile and how git stores objects
	
и можем видеть что родитель, <code>ab04d88</code> это где наша ветка master в действительности указывающая. Теперь, мы рекурсивно извлекаем это дерево и затем останавливаемся, так как мы знаем что у нас есть все что до этой точки. вы можете заставить Git дважды проверить что у нас уже есть все с помощью параметра '--recover'. Просмотрите документацию linkgit:git-http-fetch[1] чтобы получить больше подробностей.

Если извлечение одног из открытых объектов потерпит неудачу, Git будет скачивать индексы пайфайлов пытаясь найти sha значение которое ему нужно, и затем скачает этот пайфайл. 

Это важно если вы используете git сервер который обслуживает репозитории этим способом что реализация хуков post-recieve которая выполняется командой 'git update-server-info' каждый раз или произойдет путаница..	

### Извлечение данных с помощью выгрузки пакетов ###

Для более умных протоколов, извлечение объектов намного более эффективно. Сокет открыт, или через ssh или другой порт 9418 (в случае протокола git://), и команда linkgit:git-fetch-pack[1] на клиенте начнет передавать с форком процесса linkgit:git-upload-pack[1] на сервере..

Затем сервер сообщит клиенту которое SHA значение он имеет для каждой ref, и клиент определит что ему нужно и ответит со списком значение SHA ему нужных и уже которые есть.

В этот момент, сервер сгенерирует пакйфайл со всеми объектами которые нужны клиенту и передаст их клиенту.

Давайте взглянем на пример.

Клиент соединяется и посылает заголовок запроса. Команда клон

	$ git clone git://myserver.com/project.git

производит следующий запрос:

	0032git-upload-pack /project.git\\000host=myserver.com\\000

Первые 4 байта содержат 16ое длину строки (включая 4 байта длины строки и символ окончания строки если таковой имеется). Следующее это команды и их аргументы. Затем идет нулевой байт и затем данное о хосте. Запрос заканчивается нулевым байтом..

Запрос обрабатывается и конвертируется в вызов git-upload-pack:

 	$ git-upload-pack /path/to/repos/project.git

Это немедленно возвращает информацию репозитория:

	007c74730d410fcb6603ace96f1dc55ea6196122532d HEAD\\000multi_ack thin-pack side-band side-band-64k ofs-delta shallow no-progress
	003e7d1665144a3a975c05f1f43902ddaf084e784dbe refs/heads/debug
	003d5a3f6be755bbb7deae50065988cbfa1ffa9ab68a refs/heads/dist
	003e7e47fe2bd8d01d481f44d7af0531bd93d3b21c01 refs/heads/local
	003f74730d410fcb6603ace96f1dc55ea6196122532d refs/heads/master
	0000

Каждая строка начинается с 4 байт строки длины объявления в hex. Эта часть завершается строковой длиной объявления 0000.

Это отсылается назад клиенту. Клиент отвечает другим запросом:

	0054want 74730d410fcb6603ace96f1dc55ea6196122532d multi_ack side-band-64k ofs-delta
	0032want 7d1665144a3a975c05f1f43902ddaf084e784dbe
	0032want 5a3f6be755bbb7deae50065988cbfa1ffa9ab68a
	0032want 7e47fe2bd8d01d481f44d7af0531bd93d3b21c01
	0032want 74730d410fcb6603ace96f1dc55ea6196122532d
	00000009done

Это оправлено чтобы открыть процесс git-upload-pack создат поток который затем и вернет назад как заключительный ответ:

	"0008NAK\n"
	"0023\\002Counting objects: 2797, done.\n"
	"002b\\002Compressing objects:   0% (1/1177)   \r"
	"002c\\002Compressing objects:   1% (12/1177)   \r"
	"002c\\002Compressing objects:   2% (24/1177)   \r"
	"002c\\002Compressing objects:   3% (36/1177)   \r"
	"002c\\002Compressing objects:   4% (48/1177)   \r"
	"002c\\002Compressing objects:   5% (59/1177)   \r"
	"002c\\002Compressing objects:   6% (71/1177)   \r"
	"0053\\002Compressing objects:   7% (83/1177)   \rCompressing objects:   8% (95/1177)   \r"
	...
	"005b\\002Compressing objects: 100% (1177/1177)   \rCompressing objects: 100% (1177/1177), done.\n"
	"2004\\001PACK\\000\\000\\000\\002\\000\\000\n\\355\\225\\017x\\234\\235\\216K\n\\302"...
	"2005\\001\\360\\204{\\225\\376\\330\\345]z\226\273"...
	...
	"0037\\002Total 2797 (delta 1799), reused 2360 (delta 1529)\n"
	...
	"<\\276\\255L\\273s\\005\\001w0006\\001[0000"
	
Просмотрите предыдущую главу Пакфайл чтобы получить фактический формат данных пакфайла в ответе.
	
### Выполнение Push данных ###

Выполнение push данных через git и ssh протоколы похоже, но проще. По существу что происходит это клиент запрашивает экземпляр receive-pack, который запускается если клиент имеет доступ, затем сервер возвращает все sha заголовки ref которые у него есть опять и клиент генерирует пакфайл всего что требуется серверу (обычно только если то что на сервере это прямой предок того что и идет в push) и посылает этот пакфайл в исходищий поток, где сервер или сохраняет его на диске и строит индекс для него, или распаковывает его (если там не много объектов)

Это весь процесс выполняется с помощью команды linkgit:git-send-pack[1] на клиенте, которая вызывается linkgit:git-push[1] и linkgit:git-receive-pack[1]командой на стороне сервера, которая вызывается процессом соединения ssh или демоном git (если это открытый push сервер).


