### Объекты коммит ###

Объект "коммит" связывает физическое состояние дерева с описпнием того каким образом мы пришли к этому и почему. 

[fig:object-commit]

Вы можете использовать параметр --pretty=raw с linkgit:git-show[1] или linkgit:git-log[1] чтобы исследовать коммит:

    $ git show -s --pretty=raw 2be7fcb476
    commit 2be7fcb4764f2dbcee52635b91fedb1b3dcf7ab4
    tree fb3a8bdd0ceddd019615af4d57a53f43d8cee2bf
    parent 257a84d9d02e90447b149af58b271c19405edb6a
    author Dave Watson <dwatson@mimvista.com> 1187576872 -0400
    committer Junio C Hamano <gitster@pobox.com> 1187591163 -0700

        Fix misspelling of 'suppress' in docs

        Signed-off-by: Junio C Hamano <gitster@pobox.com>

Как вы можете это видеть, коммит определяется:

- **дерево**: SHA1 имя объекта дерево (как определено ниже), представляющее
  содержимое директории в определенный момент времени.
- **родитель(и)**: SHA1 имя некоторого числа коммитов которые представляют 
  собой предыдущий шаг(и) в истории проекта. Пример выше имеет одного родителя; хотя коммиты слияния могут иметь более чем одного родителя. Коммит без родителей называется "root (корневой)" коммит, и представляет собой начальное состояние проекта. Каждый проект должен иметь по крайней мере один корневой коммит. Проект может также иметь множество корней, однако это не общий случай (и не обязательно хорошая идея).
- **автор**: Имя разработчика ответственного за эти изменения, вместе с датой.
- **коммитер**: имя разработчика который создал этот коммит, вместе с датой
  этого события. Оно(имя) может отличаться от имени автора; например в случае, если автор написал патч и отправил его по эл.почте другому разработчику который наложил патч и выполнил коммит.
- **комментарий** описывающий этот коммит.

Заметьте что коммит сам по себе не содержит никакой информации о том что изменилось; все изменения вычисляются при сравнении содержимого дерева на которое ссылается создаваемый коммит и дерева на которое ссылается его родитель. Git не пытается явно регистрировать переименования файлов хотя может идентифицировать случаи где существование одниковых файловых данных в измененном пути предложит переименовать. (Просмотрите, например параметр -M к команде linkgit:git-diff[1]).

Коммит обычно создается linkgit:git-commit[1]. Эта команда создает коммит -  родитель которого текущая ветка HEAD, и чье дерево взято из содержимого сохраненного в данный момент в индексе.

### Объектная модель ###

Теперь когда мы рассмотрели 3 главных объекта (блоб, дерево и коммит), давайте теперь посмотрим как они объединяются.

Если у нас есть простой проект со след. структурой директории:

    $>tree
    .
    |-- README
    `-- lib
        |-- inc
        |   `-- tricks.rb
        `-- mylib.rb

    2 directories, 3 files

И мы выполнили коммит всего этого в репозиторий Git, это будет выглядеть след. образом:

[fig:objects-example]

Вы можете видеть что мы создали объект **дерево** для каждой директории (включая корневую) и объект **блоб** для каждого файла. Затем, мы имеем объект **коммит** указывающий на кореневую директорию, и мы можем отследить как наш проект выглядел в момент коммита.