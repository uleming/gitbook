## Объектная модель Git ##

### SHA ###

Вся информация требуемая чтобы представить историю проекта хранится в особым образом организованных файлах. Все файлы хранят ссылаются друг на друга с помощью 40-значного "имени объекта" и это имя выглядит так:
    
    6ff87c4664981e4397625791c8ea3bbb5f2279a3
    
Вы увидите эти 40-значные строки повсюду в Git.
В каждом случае имя вычисляется как SHA1 значение содержимого объекта.
SHA1 хэш это криптографическая хэш-функция. Для нас это значит то, что практически нереально найти два разных объекта с одинаковым именем. Это дает огромную выгоду; такую как:

- Git может быстро определить идентичны ли два объекта или нет, просто сравнивая их имена.
- Так как имена объектов вычисляются одинаково во всех репозиториях, то объекты с одинаковым содержимым в двух репозиториях всегда будут хранится под одинаковыми именами.
- Git может находить ошибки когда читает объект, для этого нужно просто сравнить хэш значение содержимого объекта с его именем.

### Объекты ###

Каждый объект состоит из трех частей - **тип**, **размер** , **содержимое**.
Размер это просто объем содержимого, а содержимое зависит от типа объекта. Существуют 4 разных типа объекта: "блоб", "дерево", "коммит", и "таг". 

- **"блоб"** используется чтобы хранить содержимое файла - обычно это просто файл.
- **"дерево"** это что то вроде директории - оно ссылается на группу других
     деревьев и/или блобов (т.е. файлов и директорий)
- **"коммит"** указывает на отдельное дерево, от по сути отмечает дерево
     фиксируя в истории каким образом оно выглядет в момент выполнения коммита.
     Он содержит метаинфомацию фиксируя момент времени и автора изменений внесенных с последднего коммита, указатель на предыдущий коммит, и т.д.
- **"таг"** это способ маркировать некоторым образом определенный комит. 
     Обычно это используется чтобы маркировать(по сути дать какое либо легко запоминающеся имя) определенные комиты как специфические, чтобы впоследствии было легче их найти.
    
Почти все в Git построено вокруг манипуляций этой простой структурой состоящей из четырех различных типов объектов. Это что-то вроде своеобразной файловой-системы надстроенной над файловой-системой компьютера.

### Различия с SVN ###

Важное замечание: в отличии от других распространенных систем контроля версий с которым вы возможно знакомы. Subversion, CVS, Perforce, Mercurial другие подобные им используют Delta Storage Systems (приемы на базе дельта алгоритмов http://ru.wikipedia.org/wiki/Дельта-кодирование) - они хранят разницу между двумя следующими друг за другом комитами.  Git не делает этого - он хранит снапшот своего рода точный снимок всех файлов и директорий, состояния всего дерева в момент коммита. Очень важно понимать эту концепцию когда испльзуете Git.
