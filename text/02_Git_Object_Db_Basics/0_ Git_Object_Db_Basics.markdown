## Объектная модель Git ##

### SHA ###

Вся информация которая нужна чтобы представить историю проекта хранится в файлах которые кросссылаются через 40-значное "имя объекта" и это значение выглядит как:
    
    6ff87c4664981e4397625791c8ea3bbb5f2279a3
    
Вы увидите эти 40-значные строки повсюду в Git.
В каждом случае имя вычисляется как SHA1 значение содержимого объекта.
SHA1 хэш это криптографическая хэш-функция. Это означает для нас то что это практически нереально найти два разных объекта с одинаковым именем. Это дает огромную выгоду; среди которых:

- Git может быстро определить идентичны ли два объекта или нет, просто сравнивая их имена.
- Так как имена объектов вычисляются одинаково во всех репозиториях, то объекты с одинаковым содержимым в двух репозиториях всегда будут хранится под одинаковыми именами.
- Git может определять ошибки когда читает объект, проверяя соответствие хэш значения содержимого объекта с его именем.

### Объекты ###

Каждый объект состоит из трех частей - **тип**, **объем** , **содержимое**.
Объем это просто объем содержимого, содержимое зависит от того какого типа объект, и эти 4 разных типа объекта:
"blob", "tree", "commit", and "tag". 

- **"blob"** используется чтобы хранить данные файла - обычно это просто файл.
- **"tree"** это в основном директория - оно ссылается на группу других
    trees и/или blobs (т.е. файлов и директорий)
- **"commit"** указывает на отдельное tree, маркируя его (tree) как проект выглядел в определенный момент времени.
    Он содержит метаинфомацию фиксируя момент времени и автора изменений внесенных с последднего коммита, указатель на предыдущий коммит, и т.д.
- **"tag"** это способ маркировать некоторым образом определенный комит. Обычно это используется чтобы маркировать определенные комиты как специфические, чтобы впоследствии было легче их найти.
    
Почти все в Git построено вокруг манипуляций этой простой структурой состоящей из четырех различных типов объектов. Это что-то вроде своеобразной файл-системы построенной сверху файл-системы компьютера.

### Различия с SVN ###

Это важно отличия от других распространенных систем контроля версий с которым вы возможно знакомы. Subversion, CVS, Perforce, Mercurial другие подобные им используют Delta Storage Systems - они хранят разницу между двумя следующими друг за другом комитами.  Git не делает этого - он хранит снапшот того как все файлы в вашем проекте выглядят в этой структуре дерева в момент комита. Очень важно понимать эту концепцию когда испльзуете Git.
