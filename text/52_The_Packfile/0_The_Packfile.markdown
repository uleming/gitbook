## Пакфайлы ##

Это глава объясняет подрообно, до самых битов, какой формат записи у пакфайлов и упакованы индекс файлы.

### Пакфайл индекса ###

Первое, у нас есть пакфайл индекса, который в основе просто группа закладок в пакфайле. 

Существуют две версии индекс пакфайла - версия один, которая по умолчанию для Git старше версии 1.6 и версия два которая по умолчанию начиная с версии 1.6, но но может быть прочитана Git вплоть до версии 1.5.2, и даже была портирована глубже до версии 1.4.4.5 если вы до сих пор работаете с версией из серии 1.4..

Версия два также включает CRC контрольную сумму каждого объекта и могут быть скопированы прямо из пакета в пакет во время операции переупакования без того что поврежденние данных может оказаться незамеченными. Индексы в версии 2 могут быть также обрабатывать пакфайлы размером более 4Gb.

[fig:packfile-index]

В обоих форматах, fanout таблица это просто способ быстро найти смещение определенного sha внутри индекс файла. Таблицы offset/sha1[] сортируются по sha[] значениям (это для того чтобы позволить бинарный поиск по этой таблице), и таблица fanout[] указывает на таблицу offset/sha1[] определенном способом (таким образом часть последней таблицы которая охватывает все хэши которые начинаются с отданного байта могут быть найдены чтобы избежать 8 итераций бинарного поиска).

В версии 1, смещения и sha в одном пространстве, тогда как в версии 2, существуют раздельные таблицы для sha, crc и смещений. К конце обоих файлов проверочная сумма sha для обоих индекс файл и пакфайл его ссылки.

Обратите внимание, пакфайлы индексов есть не *not* необходимость выделить объекты из пакфайла, они просто использованы быстро *quickly* получить отдельные объекты из пакета. Формат пакфайла использован в upload-pack и receieve-pack программах (push и fetch протокол) чтобы передавать объекты и не использован индекс когда - он может быть собран после факта сканируя пакфайл.

### Формат пакфайла ###

Пакфайл сам по себе очень простой формат. Существует заголовок, группа упакованных объектов (каждый со своим заголовоком и телом) и затем в конце контрольная сумма. Первые четыре байта это строка 'PACK', которая гарантирует что вы получаете начало пакфайла правильно. Затем идет 4 байта версии пакфайла и затем 4 байта количество записей в этом файле. В Ruby, вы могли бы прочитать данные заголовока след.образом:

	ruby
	def read_pack_header
	  sig = @session.recv(4)
	  ver = @session.recv(4).unpack("N")[0]
	  entries = @session.recv(4).unpack("N")[0]
	  [sig, ver, entries]
	end

После этого, вы получаете группу упакованных объектов, в порядке их SHA каждый из которых состоит из заголовка объекта и содержимого объекта. В конце пакфайла 20 байтовая сумма SHA1 всех sha значений (в отсортированном порядке) в этом пакфайле. 

[fig:packfile-format]

Заголовок объекта это группа из одного или более 1 байта (8 битов) которые определяют тип объекта и последующие данные, и размер данных когда развернуты. Каждый байт в действительности 7 битов данных, с первым битом использованным чтобы сказать если это кусок последний или не доэтого данные начинаются. Если первый бит 1, вы прочитаете другой байт, иначе далее идут данные. Первые 3 бита в первом байте оаределяют тип данных, в соотвествии с таблицей ниже. 

(В данный момент, 8 значений которые могут выразить 3 бита (0-7), 0 (000)неопределен а 5 (101) неиспользован.

Здесь мы можем увидеть примеры заголовка двух байтов, где первый определяет что следом идущие данные это коммит, и остаток первого и последние 7 битов второго определяют то что данные занимать 144 байта после открытия.

[fig:packfile-logic]

Это важно заметить что размер определенных в заголовке данных не размер который в действительно последует, но размер тех данных *когда они будут извлечены*. Поэтому смещение в индексе пакфайла так полезно, иначе вы должны расширить каждый объект просто говорите когда следующий заголовок начнется.

Та часто что является данными это просто zlib поток для  non-delta типа объектов; для двух дельта объектов представлений, порция данных содержащая что то что идентифицирует который базовый объект эта дельта представление зависит от, и дельто чтобы наложить на базовый объект чтобы восстановить объект. <code>ref-delta</code> использует 20-байтный хэш базоваго объекта в начале данных, в то время как <code>ofs-delta</code> хранит смещение в пределах того же пакфайла чтобы идентифицировать базовый объект. В других случаях, два важных ограничения перереализатор должен следовать:

* дельта представление должно быть основано на некоторм другом объекте того же 
  пакфайла;

* базовый объект должен быть того же нижележащего типа (блоб, дерево, коммит или таг);