## Отмена в Git - Сброс, Извлечение и Откат ##

Git имеет множество способов исправить ошибку в процессе вашей работы. Выбор подходящего способа зависит от того провели вы коммит с ошибкой или нет, и если вы включили ошибку в коммит, то расшарили вы ошибочный коммит с кем еще либо.

### Исправление незакоммиченных ошибок ###

Если вы испортили рабочее дерево, но не выполнили еще коммит, вы можете вернуть все рабочее дерево к состоянию на момент последнего коммита с помощью

    $ git reset --hard HEAD

Это отбросит все сделанные изменения которые вы возможно добавили в индекс git, а также все другие изменения в вашей рабочем дереве. Другими словами, результат этого - вывод команд "git diff" и "git diff --cached" будет пустым.

Если вы просто хотите восстановить только один единственный файл, предположим hello.rb, то выполните linkgit:git-checkout[1] вместо

    $ git checkout -- hello.rb
    $ git checkout HEAD hello.rb

Первая команда восстановит hello.rb до версии хранящейся в индексе, и команда "git diff hello.rb" не покажет отличий. Вторая команда восстановит hello.rb до версии в ревизии HEAD, таким образом обе команды "git diff hello.rb" и "git diff --cached hello.rb" не покажут отличий.

### Исправление закоммиченных ошибок ###

Если вы сделали коммит а позже вам захотелось чтоб его и не было, то есть два фундаментально разных способа осуществить это:

1. Вы создаете новый коммит в котором нет тех нежелательных частей
    присутствующих в старом коммите.  Это правильный способ если ваша ошибка уже была опубликована.

2. Вы можете вернуться назад и изменить ваш старый коммит. Никогда не делайте 
    этого если вы уже опубликовали вашу историю; git не предполагает изменения в **истории** проекта, и не может правильно выполнять повтор слияния из ветки, история которой была изменена.

#### Исправление ошибки новым коммитом ####

Создание нового коммита который восстанавливает предыдущее состояние очень просто; нужно только передать команду linkgit:git-revert[1] ссылку на ошибочный коммит; например чтобы восстановить наиболее свежий коммит:

    $ git revert HEAD

Это создаст новый коммит который отменяет изменения в HEAD. Вам предоставится шанс отредактировать сообщение-описание нового коммита.

Вы также можете восстановить предыдущие изменения, например, от слеж к прошлому:

    $ git revert HEAD^

В этом случае git попробует отменить прошлые изменения, в то время как любые изменения сделанные потом остануться нетронутыми. Если более свежие изменения перекрывают с изменениями которые должны быть восстановлены, то git пропросит вас исправить конфликты вручную, таким же образом как в случае слияний.

#### Исправление ошибок изменяя коммит ####

Если вы только что выполнили коммит но осознали что вам нужно в нем что то исправить, последнии версии linkgit:git-commit[1] поддерживают флаг **--amend** который указывает git заменит коммит HEAD новым коммитом, основываясь на текущем содержании индекса. Это дает вам удобный случай добавить файлы которые вы забыли добавить или исправить опечатки в сообщении-описании коммита, до того как вы выполните push и сделаете свои изменения доступными всему миру.

Если вы нашли  ошибку в давнем коммите, но который еще не опубликовали, используйте linkgit:git-rebase[1] в интерактивном режиме, с "git rebase -i" отмечающий изменения которые требуют коррекции с **edit**. Это позволит вам изменить коммит во время процесса rebase.
